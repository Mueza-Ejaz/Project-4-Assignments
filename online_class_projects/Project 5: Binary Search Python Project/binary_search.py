# -*- coding: utf-8 -*-
"""binary_search.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CxLAkjdEP7SGbH2m6y50XvsTUETeeIyD

# **Project 5: Binary Search Python Project**
"""

# A sorted list (in ascending order) required for binary search
my_list = [2, 5, 7, 8, 9, 10, 14, 17, 18, 19, 20]

# Take a number as input from the user and convert it to an integer
x = int(input("Enter a number: "))


# l= lower_index, h= higher_index, m= middle_number
def binary_search(my_list, l, h, x):
    if h >= l:
       # Double slash '//' means floor division (ignores the decimal part).
        m = (h + l) // 2

        if my_list[m] == x:
            return m  # Index return

        elif my_list[m] > x:
            return binary_search(my_list, l, m - 1, x)  # Left half search

        else:
            return binary_search(my_list, m + 1, h, x)  # Right half search

    else:
        return -1  # Number not found


# Calling the binary_search function with the initial range
r = binary_search(my_list, 0, len(my_list) - 1, x)

# Output result
if r != -1:
    print("Number is present at index", r)
else:
    print("Number is not present in the list")